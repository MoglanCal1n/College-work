     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 04                          b db 4
    15 00000002 03                          c db 3
    16 00000003 02                          d db 2
    17 00000004 0100                        e dw 1
    18 00000006 0800000000000000            x dq 8
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; (a*b-2*c*d)/(c-e)+x/a; a,b,c,d-byte; e-word; x-qword
    24                                         
    25 00000000 B800000000                     mov eax, 0
    26 00000005 BB00000000                     mov ebx, 0
    27 0000000A B900000000                     mov ecx, 0
    28 0000000F BA00000000                     mov edx, 0
    29                                          
    30 00000014 A0[00000000]                   mov al, [a]
    31 00000019 6698                           cbw 
    32 0000001B F62D[01000000]                 imul byte [b] 
    33                                         
    34 00000021 6689C3                         mov bx, ax 
    35                                         
    36 00000024 66B80200                       mov ax, 2 
    37 00000028 F62D[02000000]                 imul byte [c] 
    38 0000002E F62D[03000000]                 imul byte [d] 
    39                                         
    40 00000034 6629C3                         sub bx, ax 
    41 00000037 6689D9                         mov cx, bx 
    42                                         
    43 0000003A A0[02000000]                   mov al, [c]
    44 0000003F 6698                           cbw  
    45 00000041 662B05[04000000]               sub ax, [e]
    46                                         
    47 00000048 6689C3                         mov bx, ax 
    48 0000004B 6689C8                         mov ax, cx 
    49                                         
    50 0000004E 66F7FB                         idiv bx 
    51                                         
    52 00000051 BB00000000                     mov ebx, 0
    53 00000056 6689C3                         mov bx, ax 
    54                                         
    55 00000059 A0[00000000]                   mov al, [a] 
    56 0000005E 6698                           cbw 
    57 00000060 98                             cwde
    58 00000061 89C1                           mov ecx, eax 
    59                                         
    60                                         
    61 00000063 A1[06000000]                   mov eax, dword [x+0]
    62 00000068 8B15[0A000000]                 mov edx, dword [x+4]
    63                                         
    64 0000006E F7F9                           idiv ecx 
    65                                         
    66 00000070 01D8                           add eax, ebx 
    67                                         
    68                                          
    69                                        
    70                                          
    71                                          
    72                                          
    73                                          
    74                                          ; exit(0)
    75 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
