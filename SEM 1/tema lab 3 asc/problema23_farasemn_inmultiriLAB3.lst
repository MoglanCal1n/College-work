     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 04                          b db 4
    15 00000002 03                          c db 3
    16 00000003 02                          d db 2
    17 00000004 0100                        e dw 1
    18 00000006 0800000000000000            x dq 8
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; (a*b-2*c*d)/(c-e)+x/a; a,b,c,d-byte; e-word; x-qword
    24                                         
    25 00000000 B800000000                     mov eax, 0
    26 00000005 BB00000000                     mov ebx, 0
    27 0000000A BA00000000                     mov edx, 0
    28                                          
    29 0000000F A0[00000000]                   mov al, [a]
    30 00000014 B400                           mov ah, 0
    31 00000016 F625[01000000]                 mul byte [b] 
    32                                         
    33 0000001C 6689C3                         mov bx, ax 
    34                                         
    35 0000001F 66B80200                       mov ax, 2 
    36 00000023 F625[02000000]                 mul byte [c] 
    37 00000029 F625[03000000]                 mul byte [d] 
    38                                         
    39 0000002F 6629C3                         sub bx, ax 
    40 00000032 6689D8                         mov ax, bx 
    41                                         
    42 00000035 8A1D[02000000]                 mov bl, [c]
    43 0000003B B700                           mov bh, 0 
    44 0000003D 662B1D[04000000]               sub bx, [e]
    45                                         
    46 00000044 66F7F3                         div bx 
    47                                         
    48 00000047 BB00000000                     mov ebx, 0
    49 0000004C 6689C3                         mov bx, ax 
    50                                         
    51 0000004F B900000000                     mov ecx, 0
    52 00000054 8A0D[00000000]                 mov cl, [a] 
    53                                         
    54 0000005A A1[06000000]                   mov eax, dword [x+0]
    55 0000005F 8B15[0A000000]                 mov edx, dword [x+4]
    56                                         
    57 00000065 F7F1                           div ecx 
    58                                         
    59 00000067 01D8                           add eax, ebx 
    60                                         
    61                                          
    62                                        
    63                                          
    64                                          
    65                                          
    66                                          
    67                                          ; exit(0)
    68 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    69 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
