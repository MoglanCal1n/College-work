     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0100                        a dw 1
    14 00000002 0300                        b dw 3
    15 00000004 03                          c db 3
    16 00000005 02                          d db 2
    17 00000006 06000000                    e dd 6
    18 0000000A 0800000000000000            x dq 8
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; 1/a+200*b-c/(d+1)+x/a-e; a,b-word; c,d-byte; e-doubleword; x-qword
    24                                          
    25 00000000 B800000000                      mov eax, 0; eax = 0
    26 00000005 BB00000000                      mov ebx, 0; ebx = 0
    27 0000000A BA00000000                      mov edx, 0; edx = 0
    28                                          
    29 0000000F 66B80100                        mov ax, 1 ; ax = 1
    30 00000013 668B1D[00000000]                mov bx, [a] ; bx = a
    31 0000001A 66F7F3                          div bx ; dx:ax = 1/a 
    32                                          
    33 0000001D 6652                            push dx; dx in stiva
    34 0000001F 6650                            push ax; ax in stiva
    35                                          
    36 00000021 B8C8000000                      mov eax, 200; eax = 200
    37 00000026 66F725[02000000]                mul word [b] ; eax = 200 * b
    38                                          
    39 0000002D 5B                              pop ebx ; ebx = 1/a
    40                                          
    41 0000002E 01C3                            add ebx, eax ; ebx = 1/a + 200*b
    42                                          
    43                                          
    44 00000030 B800000000                      mov eax, 0; eax = 0
    45 00000035 A0[04000000]                    mov al, [c]; al = c
    46 0000003A B400                            mov ah, 0; ax = c 
    47 0000003C B900000000                      mov ecx, 0
    48 00000041 8A0D[05000000]                  mov cl, [d] ; cl = d
    49 00000047 FEC1                            inc cl ; cl += 1
    50 00000049 F6F1                            div cl ; dx:ax  = c/(d+1) // idiv
    51 0000004B 6652                            push dx 
    52 0000004D 6650                            push ax 
    53 0000004F 58                              pop eax 
    54 00000050 29C3                            sub ebx, eax ; ebx = 1/a+200*b-c/(d+1) 
    55                                          
    56 00000052 B900000000                      mov ecx, 0 ;  
    57 00000057 8A0D[00000000]                  mov cl, [a]
    58 0000005D A1[0A000000]                    mov eax, dword [x+0]
    59 00000062 8B15[0E000000]                  mov edx, dword [x+4] 
    60                                          
    61 00000068 F7F1                            div ecx 
    62                                          
    63 0000006A 01D8                            add eax, ebx ; 1/a+200*b-c/(d+1)+x/a 
    64                                          
    65 0000006C 2B05[06000000]                  sub eax, [e]; 1/a+200*b-c/(d+1)+x/a-e   
    66                                          
    67                                          
    68                                          
    69                                          ; exit(0)
    70 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
