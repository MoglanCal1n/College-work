     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 04                          a db 4
    14 00000001 0700                        b dw 7
    15 00000003 03000000                    c dd 3
    16 00000007 0200000000000000            d dq 2
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;(b+c+d)-(a+a) = 4
    22 00000000 B800000000                      mov eax, 0
    23 00000005 66A1[01000000]                  mov ax, [b] 
    24 0000000B 98                              cwde  
    25 0000000C 660305[03000000]                add ax, [c] ; b+c
    26 00000013 99                              cdq 
    27 00000014 0305[07000000]                  add eax, [d] ; (b+c+d)
    28 0000001A 83D200                          adc edx, 0
    29                                          
    30 0000001D 50                              push eax 
    31                                          
    32 0000001E B800000000                      mov eax, 0
    33 00000023 A0[00000000]                    mov al, [a]
    34 00000028 0205[00000000]                  add al, [a]
    35 0000002E 6698                            cbw 
    36 00000030 6683D000                        adc ax, 0
    37 00000034 98                              cwde 
    38 00000035 99                              cdq 
    39                                          
    40 00000036 50                              push eax 
    41 00000037 5B                              pop ebx
    42 00000038 58                              pop eax
    43                                          
    44 00000039 29D8                            sub eax, ebx
    45 0000003B 83DA00                          sbb edx, 0
    46                                        
    47                                                 
    48                                          ; exit(0)
    49 0000003E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000040 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
