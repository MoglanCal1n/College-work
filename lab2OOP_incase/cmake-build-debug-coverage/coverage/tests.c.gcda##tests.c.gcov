        -:    0:Source:C:/Users/Moglan Calin-Stefan/CLionProjects/lab2OOP_incase/tests.c
        -:    0:Graph:C:\Users\Moglan Calin-Stefan\CLionProjects\lab2OOP_incase\cmake-build-debug-coverage\CMakeFiles\lab2OOP_incase.dir\tests.c.gcno
        -:    0:Data:C:\Users\Moglan Calin-Stefan\CLionProjects\lab2OOP_incase\cmake-build-debug-coverage\CMakeFiles\lab2OOP_incase.dir\tests.c.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:#include <string.h>
        -:    3:#include "tests.h"
        -:    4:
        -:    5://Teste Domeniu
        -:    6:
function test_creazaTrans called 1 returned 100% blocks executed 70%
        1:    7:void test_creazaTrans(){
        1:    8:    Trans t = create_transaction("descriere", 210, "intrare", 21);
        1:    8-block  0
call    0 returned 1
       1*:    9:    assert(strcmp(t.descriere, "descriere") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:    9-block  0
call    2 never executed
        1:    9-block  1
       1*:   10:    assert(strcmp(t.tip, "intrare") == 0);
        1:   10-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   10-block  1
call    2 never executed
        1:   10-block  2
       1*:   11:    assert(t.suma == 210);
        1:   11-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   11-block  1
call    2 never executed
        1:   11-block  2
       1*:   12:    assert(t.zi == 21);
        1:   12-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   12-block  1
call    2 never executed
        1:   12-block  2
        -:   13:
        1:   14:    Trans t2 = create_transaction("alta descriere", 210, "iesire", 16);
        1:   14-block  0
call    0 returned 1
       1*:   15:    assert(strcmp(t2.descriere, "alta descriere") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   15-block  0
call    2 never executed
        1:   15-block  1
       1*:   16:    assert(strcmp(t2.tip, "iesire") == 0);
        1:   16-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   16-block  1
call    2 never executed
        1:   16-block  2
       1*:   17:    assert(t2.suma == 210);
        1:   17-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   17-block  1
call    2 never executed
        1:   17-block  2
       1*:   18:    assert(t2.zi == 16);
        1:   18-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   18-block  1
call    2 never executed
        1:   18-block  2
        -:   19:
        1:   20:}
        -:   21:
function test_destroyTrans called 1 returned 100% blocks executed 73%
        1:   22:void test_destroyTrans(){
        1:   23:    Trans t = create_transaction("descriere", 210, "intrare", 21);
        1:   23-block  0
call    0 returned 1
        1:   24:    delete_transaction(&t);
call    0 returned 1
       1*:   25:    assert(strcmp(t.descriere, "") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   25-block  0
call    2 never executed
        1:   25-block  1
       1*:   26:    assert(strcmp(t.tip, "") == 0);
        1:   26-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   26-block  1
call    2 never executed
        1:   26-block  2
       1*:   27:    assert(t.suma == 0);
        1:   27-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   27-block  1
call    2 never executed
        1:   27-block  2
       1*:   28:    assert(t.zi == 0);
        1:   28-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   28-block  1
call    2 never executed
        1:   28-block  2
        1:   29:}
        -:   30:
function test_valid called 1 returned 100% blocks executed 81%
        1:   31:void test_valid(){
        1:   32:    Trans t = create_transaction("descriere", 210, "intrare", 21);
        1:   32-block  0
call    0 returned 1
        1:   33:    int valid1 = validate(t);
call    0 returned 1
       1*:   34:    assert(valid1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   34-block  0
call    2 never executed
        1:   34-block  1
        -:   35:
        1:   36:    Trans t2 = create_transaction("", 0, "intrare", 16);
        1:   36-block  0
call    0 returned 1
        1:   37:    int valid2 = validate(t2);
call    0 returned 1
       1*:   38:    assert(valid2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   38-block  0
call    2 never executed
        1:   38-block  1
        -:   39:
        1:   40:    Trans t3 = create_transaction("descriere", 200, "", 16);
        1:   40-block  0
call    0 returned 1
        1:   41:    int valid3 = validate(t3);
call    0 returned 1
       1*:   42:    assert(valid3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   42-block  0
call    2 never executed
        1:   42-block  1
        -:   43:
        1:   44:    Trans t4 = create_transaction("o descriere", 10, "intrare", -1);
        1:   44-block  0
call    0 returned 1
        1:   45:    int valid4 = validate(t4);
call    0 returned 1
       1*:   46:    assert(valid4 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   46-block  0
call    2 never executed
        1:   46-block  1
        -:   47:
        1:   48:}
        -:   49:
        -:   50://Teste Repository
        -:   51:
function test_create_empty called 1 returned 100% blocks executed 80%
        1:   52:void test_create_empty(){
        1:   53:    List l = createEmpty();
        1:   53-block  0
call    0 returned 1
       1*:   54:    assert(l.len == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   54-block  0
call    2 never executed
        1:   54-block  1
        1:   55:}
        -:   56:
function test_AddGet called 1 returned 100% blocks executed 79%
        1:   57:void test_AddGet() {
        1:   58:    List v = createEmpty();
        1:   58-block  0
call    0 returned 1
        1:   59:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:   60:    Trans el2 = create_transaction("descriere", 240, "iesire", 16);
call    0 returned 1
        1:   61:    add(&v, el1);
call    0 returned 1
        1:   62:    add(&v, el2);
call    0 returned 1
       1*:   63:    assert(size(&v) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   63-block  0
call    3 never executed
        1:   63-block  1
       1*:   64:    assert(strcmp(get(&v, 0).tip, el1.tip) == 0);
        1:   64-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   64-block  1
call    3 never executed
        1:   64-block  2
       1*:   65:    assert(strcmp(get(&v, 0).descriere, el1.descriere) == 0);
        1:   65-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   65-block  1
call    3 never executed
        1:   65-block  2
       1*:   66:    assert(get(&v, 0).zi == el1.zi);
        1:   66-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   66-block  1
call    3 never executed
        1:   66-block  2
       1*:   67:    assert(get(&v, 0).suma == el1.suma);
        1:   67-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   67-block  1
call    3 never executed
        1:   67-block  2
        -:   68:
       1*:   69:    assert(strcmp(get(&v, 1).tip, el2.tip) == 0);
        1:   69-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   69-block  1
call    3 never executed
        1:   69-block  2
       1*:   70:    assert(strcmp(get(&v, 1).descriere, el2.descriere) == 0);
        1:   70-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   70-block  1
call    3 never executed
        1:   70-block  2
       1*:   71:    assert(get(&v, 1).zi == el2.zi);
        1:   71-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   71-block  1
call    3 never executed
        1:   71-block  2
       1*:   72:    assert(get(&v, 1).suma == el2.suma);
        1:   72-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   72-block  1
call    3 never executed
        1:   72-block  2
        1:   73:}
        -:   74:
function test_destroy called 1 returned 100% blocks executed 88%
        1:   75:void test_destroy(){
        1:   76:    List l = createEmpty();
        1:   76-block  0
call    0 returned 1
        1:   77:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:   78:    add(&l, el1);
call    0 returned 1
        1:   79:    destroy(&l);
call    0 returned 1
       1*:   80:    assert(l.len == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   80-block  0
call    2 never executed
        1:   80-block  1
        1:   81:}
        -:   82:
function test_add called 1 returned 100% blocks executed 86%
        1:   83:void test_add(){
        1:   84:    List l = createEmpty();
        1:   84-block  0
call    0 returned 1
        1:   85:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:   86:    add(&l, el1);
call    0 returned 1
       1*:   87:    assert(l.len == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   87-block  0
call    2 never executed
        1:   87-block  1
        1:   88:}
        -:   89:
function test_delete called 1 returned 100% blocks executed 81%
        1:   90:void test_delete(){
        1:   91:    List v = createEmpty();
        1:   91-block  0
call    0 returned 1
        1:   92:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:   93:    Trans el2 = create_transaction("descriere", 240, "iesire", 16);
call    0 returned 1
        1:   94:    add(&v, el1);
call    0 returned 1
        1:   95:    add(&v, el2);
call    0 returned 1
        -:   96:
       1*:   97:    assert(size(&v) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   97-block  0
call    3 never executed
        1:   97-block  1
        -:   98:
        1:   99:    delete(&v, 0);
        1:   99-block  0
call    0 returned 1
       1*:  100:    assert(size(&v) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  100-block  0
call    3 never executed
        1:  100-block  1
        -:  101:
       1*:  102:    assert(strcmp(get(&v, 0).tip, el2.tip) == 0);
        1:  102-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  102-block  1
call    3 never executed
        1:  102-block  2
       1*:  103:    assert(strcmp(get(&v, 0).descriere, el2.descriere) == 0);
        1:  103-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  103-block  1
call    3 never executed
        1:  103-block  2
       1*:  104:    assert(get(&v, 0).zi == el2.zi);
        1:  104-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  104-block  1
call    3 never executed
        1:  104-block  2
       1*:  105:    assert(get(&v, 0).suma == el2.suma);
        1:  105-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  105-block  1
call    3 never executed
        1:  105-block  2
        1:  106:}
        -:  107:
function test_addTrans called 1 returned 100% blocks executed 75%
        1:  108:void test_addTrans(){
        1:  109:    List v = createEmpty();
        1:  109-block  0
call    0 returned 1
        1:  110:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        -:  111:
        1:  112:    addTrans(&v, el1, 2);
call    0 returned 1
       1*:  113:    assert(v.elem[2].zi == 21);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  113-block  0
call    2 never executed
        1:  113-block  1
       1*:  114:    assert(strcmp(v.elem[2].descriere, "descriere") == 0);
        1:  114-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  114-block  1
call    2 never executed
        1:  114-block  2
       1*:  115:    assert(strcmp(v.elem[2].tip, "intrare") == 0);
        1:  115-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  115-block  1
call    2 never executed
        1:  115-block  2
       1*:  116:    assert(v.elem[2].suma == 210);
        1:  116-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  116-block  1
call    2 never executed
        1:  116-block  2
        1:  117:}
        -:  118:
function test_size called 1 returned 100% blocks executed 90%
        1:  119:void test_size(){
        1:  120:    List v = createEmpty();
        1:  120-block  0
call    0 returned 1
        1:  121:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:  122:    Trans el2 = create_transaction("descriere", 240, "iesire", 16);
call    0 returned 1
        1:  123:    add(&v, el1);
call    0 returned 1
        1:  124:    add(&v, el2);
call    0 returned 1
        -:  125:
       1*:  126:    assert(size(&v) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  126-block  0
call    3 never executed
        1:  126-block  1
        1:  127:}
        -:  128:
function test_addTransService called 1 returned 100% blocks executed 80%
        1:  129:void test_addTransService(){
        1:  130:    List v = createEmpty();
        1:  130-block  0
call    0 returned 1
        1:  131:    int valid1 = adaugaTrans(&v, "descriere", 210, "intrare", 16);
call    0 returned 1
        1:  132:    int valid2 = adaugaTrans(&v, "", 0, "", 0);
call    0 returned 1
       1*:  133:    assert(valid1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  133-block  0
call    2 never executed
        1:  133-block  1
       1*:  134:    assert(valid2 == 0);
        1:  134-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  134-block  1
call    2 never executed
        1:  134-block  2
        1:  135:}
        -:  136:
function test_deleteTransService called 1 returned 100% blocks executed 83%
        1:  137:void test_deleteTransService(){
        1:  138:    List v = createEmpty();
        1:  138-block  0
call    0 returned 1
        1:  139:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:  140:    add(&v, el1);
call    0 returned 1
        -:  141:
        1:  142:    int valid2 = stergeTrans(&v, "", 190, "iesire", 16);
call    0 returned 1
       1*:  143:    assert(valid2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  143-block  0
call    2 never executed
        1:  143-block  1
        -:  144:
        1:  145:    int valid1 = stergeTrans(&v, "descriere", 210, "intrare", 21);
        1:  145-block  0
call    0 returned 1
       1*:  146:    assert(valid1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  146-block  0
call    2 never executed
        1:  146-block  1
        1:  147:}
        -:  148:
function test_modifyDomain called 1 returned 100% blocks executed 75%
        1:  149:void test_modifyDomain(){
        1:  150:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
        1:  150-block  0
call    0 returned 1
        1:  151:    Trans el2 = create_transaction("descriere", 240, "iesire", 16);
call    0 returned 1
        -:  152:
        1:  153:    modify_transaction(&el1, &el2);
call    0 returned 1
        -:  154:
       1*:  155:    assert(strcmp(el1.descriere, "descriere") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  155-block  0
call    2 never executed
        1:  155-block  1
       1*:  156:    assert(strcmp(el1.tip, "iesire") == 0);
        1:  156-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  156-block  1
call    2 never executed
        1:  156-block  2
       1*:  157:    assert(el1.suma == 240);
        1:  157-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  157-block  1
call    2 never executed
        1:  157-block  2
       1*:  158:    assert(el1.zi == 16);
        1:  158-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  158-block  1
call    2 never executed
        1:  158-block  2
        1:  159:}
        -:  160:
function test_modifyRepo called 1 returned 100% blocks executed 75%
        1:  161:void test_modifyRepo(){
        1:  162:    List v = createEmpty();
        1:  162-block  0
call    0 returned 1
        1:  163:    Trans el1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        -:  164:
        1:  165:    modifyTrans(&v, el1, 2);
call    0 returned 1
       1*:  166:    assert(v.elem[2].zi == 21);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  166-block  0
call    2 never executed
        1:  166-block  1
       1*:  167:    assert(strcmp(v.elem[2].descriere, "descriere") == 0);
        1:  167-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  167-block  1
call    2 never executed
        1:  167-block  2
       1*:  168:    assert(strcmp(v.elem[2].tip, "intrare") == 0);
        1:  168-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  168-block  1
call    2 never executed
        1:  168-block  2
       1*:  169:    assert(v.elem[2].suma == 210);
        1:  169-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  169-block  1
call    2 never executed
        1:  169-block  2
        1:  170:}
        -:  171:
function test_modifyServ called 1 returned 100% blocks executed 81%
        1:  172:void test_modifyServ(){
        1:  173:    List v = createEmpty();
        1:  173-block  0
call    0 returned 1
        1:  174:    Trans t = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:  175:    add(&v, t);
call    0 returned 1
        1:  176:    int valid1 = modifyTransServ(&v, "descriere", 210, "intrare", 21,
call    0 returned 1
        -:  177:                                 "descriere", 240, "iesire", 16);
       1*:  178:    assert(valid1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  178-block  0
call    2 never executed
        1:  178-block  1
        -:  179:
        1:  180:    int valid2 = modifyTransServ(&v, "descriere", 200, "intrare", 21,
        1:  180-block  0
call    0 returned 1
        -:  181:                                 "descriere", 240, "iesire", 16);
       1*:  182:    assert(valid2 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  182-block  0
call    2 never executed
        1:  182-block  1
        -:  183:
        1:  184:    int valid3 = modifyTransServ(&v, "descriere", 210, "intrare", 21,
        1:  184-block  0
call    0 returned 1
        -:  185:                                 "descriere", 0, "bla bla", 0);
       1*:  186:    assert(valid3 == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  186-block  0
call    2 never executed
        1:  186-block  1
        -:  187:
        1:  188:}
        -:  189:
function test_critTip called 1 returned 100% blocks executed 89%
        1:  190:void test_critTip(){
        1:  191:    List l = createEmpty();
        1:  191-block  0
call    0 returned 1
        1:  192:    Trans t1 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:  193:    Trans t2 = create_transaction("descriere", 210, "intrare", 21);
call    0 returned 1
        1:  194:    Trans t3 = create_transaction("descriere", 210, "iesire", 21);
call    0 returned 1
        -:  195:
        1:  196:    add(&l, t1);
call    0 returned 1
        1:  197:    add(&l, t2);
call    0 returned 1
        1:  198:    add(&l, t3);
call    0 returned 1
        -:  199:
        1:  200:    List valid = transCritTip(&l, "intrare");
call    0 returned 1
       1*:  201:    assert(size(&valid) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  201-block  0
call    3 never executed
        1:  201-block  1
        -:  202:
        1:  203:    List valid2 = transCritTip(&l, "iesire");
        1:  203-block  0
call    0 returned 1
       1*:  204:    assert(size(&valid2) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  204-block  0
call    3 never executed
        1:  204-block  1
        1:  205:}
        -:  206:
function test_critSuma called 1 returned 100% blocks executed 89%
        1:  207:void test_critSuma(){
        1:  208:    List l = createEmpty();
        1:  208-block  0
call    0 returned 1
        1:  209:    Trans t1 = create_transaction("descriere", 100, "intrare", 21);
call    0 returned 1
        1:  210:    Trans t2 = create_transaction("descriere", 200, "intrare", 21);
call    0 returned 1
        1:  211:    Trans t3 = create_transaction("descriere", 50, "iesire", 21);
call    0 returned 1
        -:  212:
        1:  213:    add(&l, t1);
call    0 returned 1
        1:  214:    add(&l, t2);
call    0 returned 1
        1:  215:    add(&l, t3);
call    0 returned 1
        -:  216:
        1:  217:    List valid1 = transCritSuma(&l, 100, 1);
call    0 returned 1
       1*:  218:    assert(size(&valid1) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  218-block  0
call    3 never executed
        1:  218-block  1
        -:  219:
        1:  220:    List valid2 = transCritSuma(&l, 100, 2);
        1:  220-block  0
call    0 returned 1
       1*:  221:    assert(size(&valid2) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  221-block  0
call    3 never executed
        1:  221-block  1
        1:  222:}
        -:  223:
function test_Sort called 1 returned 100% blocks executed 87%
        1:  224:void test_Sort(){
        1:  225:    List l = createEmpty();
        1:  225-block  0
call    0 returned 1
        1:  226:    Trans t1 = create_transaction("descriere", 2, "intrare", 3);
call    0 returned 1
        1:  227:    Trans t2 = create_transaction("descriere", 1, "intrare", 2);
call    0 returned 1
        1:  228:    Trans t3 = create_transaction("descriere", 3, "iesire", 1);
call    0 returned 1
        -:  229:
        1:  230:    add(&l, t1);
call    0 returned 1
        1:  231:    add(&l, t2);
call    0 returned 1
        1:  232:    add(&l, t3);
call    0 returned 1
        -:  233:
        1:  234:    sort_zi_suma(&l, 1, -1, 1);
call    0 returned 1
        -:  235:
       1*:  236:    assert(l.elem[0].suma == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  236-block  0
call    2 never executed
        1:  236-block  1
        -:  237:
        1:  238:    sort_zi_suma(&l, 1, -1, 2);
        1:  238-block  0
call    0 returned 1
        -:  239:
       1*:  240:    assert(l.elem[0].suma == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  240-block  0
call    2 never executed
        1:  240-block  1
        -:  241:
        1:  242:    List v = createEmpty();
        1:  242-block  0
call    0 returned 1
        1:  243:    Trans s1 = create_transaction("descriere", 1, "intrare", 2);
call    0 returned 1
        1:  244:    Trans s2 = create_transaction("descriere", 2, "intrare", 1);
call    0 returned 1
        1:  245:    Trans s3 = create_transaction("descriere", 3, "iesire", 3);
call    0 returned 1
        -:  246:
        1:  247:    add(&v, s1);
call    0 returned 1
        1:  248:    add(&v, s2);
call    0 returned 1
        1:  249:    add(&v, s3);
call    0 returned 1
        -:  250:
        1:  251:    sort_zi_suma(&v, -1, 1, 1);
call    0 returned 1
        -:  252:
       1*:  253:    assert(v.elem[0].zi == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  253-block  0
call    2 never executed
        1:  253-block  1
        -:  254:
        1:  255:    sort_zi_suma(&v, -1, 1, 2);
        1:  255-block  0
call    0 returned 1
        -:  256:
       1*:  257:    assert(v.elem[0].zi == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  257-block  0
call    2 never executed
        1:  257-block  1
        1:  258:}
